#!/usr/bin/env ruby

require 'dns/monitor'


# Working directory
def wd(*path_bits)
  File.join Dir.pwd, *path_bits
end


# Default params
params = {
  db_path: ENV['DB_PATH'] || wd('dns-monitor.sqlite3'),
  domains_path: ENV['DOMAINS_PATH'] || wd('dns_monitor_hosts.txt'),
  rdap_url: ENV['RDAP_URL'] || 'https://www.pairdomains.com/rdap'
}


# Command-line options
OptionParser.new do |opts|
  opts.on('-g', '--gchat URL', String, 'Optional GChat webhook URL for notifications')
  opts.on('-c', '--check', 'Check your domain name list')
  opts.on('-d', '--db_path PATH', String, "Path to the database file. Defaults to #{params[:db_path]}")
  opts.on('-h', '--help', 'Print this help') do
    puts opts
    exit 1
  end
  opts.on('-p', '--domains_path PATH', String, "Path to your domain file list. Defaults to #{params[:domains_path]}")
  opts.on('-m', '--domain DOMAIN', String, 'Print existing results for a given domain as a JSON array')
  opts.on('-u', '--rdap_url URL', String, "URL of your RDAP resolver. Defaults to #{params[:rdap_url]}")
  opts.on('--mandrill-key KEY', String, "Mandrill API key. REQUIRES --mandrill-email to work.")
  opts.on('--mandrill-email EMAIL', String, "Mandrill recipient email.")
end.parse!(into: params)


# Do the things
DNS::Monitor::Runner.new(params).check if params[:check]
DNS::Monitor::Runner.new(params).entries if params[:domain]
